#include <bits/stdc++.h>
using namespace std;
#define int long long

using cd = complex<double>;
const double PI = acos(-1);

// Fast Fourier Transform
void fft(vector<cd> &a, bool invert) {
    int n = a.size();

    // Bit-reversal permutation
    for (int i = 1, j = 0; i < n; i++) {
        int bit = n >> 1;
        for (; j & bit; bit >>= 1)
            j ^= bit;
        j ^= bit;
        if (i < j)
            swap(a[i], a[j]);
    }

    // Iterative FFT
    for (int len = 2; len <= n; len <<= 1) {
        double ang = 2 * PI / len * (invert ? -1 : 1);
        cd wlen(cos(ang), sin(ang));
        for (int i = 0; i < n; i += len) {
            cd w(1.0, 0.0);
            for (int j = 0; j < len / 2; j++) {
                cd u = a[i + j], v = a[i + j + len / 2] * w;
                a[i + j] = u + v;
                a[i + j + len / 2] = u - v;
                w *= wlen;
            }
        }
    }

    if (invert) {
        for (cd &x: a)
            x /= n;
    }
}

// Multiply two polynomials using FFT
vector<int> multiply(const vector<int> &a, const vector<int> &b) {
    vector<cd> fa(a.begin(), a.end()), fb(b.begin(), b.end());
    int n = 1;
    while (n < (int) (a.size() + b.size()))
        n <<= 1;
    fa.resize(n);
    fb.resize(n);

    fft(fa, false);
    fft(fb, false);
    for (int i = 0; i < n; i++)
        fa[i] *= fb[i];
    fft(fa, true);

    vector<int> result(n);
    for (int i = 0; i < n; i++)
        result[i] = round(fa[i].real());

    // Optional: trim trailing zeros
    while (!result.empty() && result.back() == 0)
        result.pop_back();

    return result;
}

// Optional: test usage
void solve() {
    int n;
    cin >> n;

    vector<int> a(n + 1), b(n + 1);
    for (int i = 0; i <= n; i++) cin >> a[i];
    for (int i = 0; i <= n; i++) cin >> b[i];

    vector<int> c = multiply(a, b);
    for (int i = 0; i <= 2*n; i++)
        cout << c[i] << " ";
    cout << endl;
}

/*
If
a.size() = A (i.e. degree = A - 1)
b.size() = B (i.e. degree = B - 1)

Then:
âœ… result.size() = A + B - 1
 */

signed main() {
    ios::sync_with_stdio(false);
    cin.tie(nullptr);
    int t = 1;
    cin >> t;
    while (t--) solve();
    return 0;
}
